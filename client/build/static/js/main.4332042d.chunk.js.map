{"version":3,"sources":["components/Post.js","App.js","serviceWorker.js","index.js"],"names":["Post","post","useState","paused","setPaused","titleShown","setTitleShown","videoRef","useRef","className","onClick","shown","title","style","fontSize","length","opacity","type","src","media","alt","id","ref","video","current","play","call","pause","mediaTypes","App","posts","setPosts","initialLoad","setInitialLoad","after","setAfter","count","setCount","refreshing","setRefreshing","getTopPosts","fetch","then","res","json","data","c","dist","p","children","filter","includes","post_hint","map","url","oembed","thumbnail_url","reddit_video","fallback_url","permalink","catch","e","console","log","finally","useEffect","name","fadeIn","target","href","rel","onYReachEnd","key","Date","getFullYear","role","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.4332042d.chunk.js","sourcesContent":["import React, { useRef, useState } from \"react\";\n\nfunction Post({ post }) {\n  const [paused, setPaused] = useState(true);\n  const [titleShown, setTitleShown] = useState(true);\n  const videoRef = useRef();\n\n  let toggleVideoPaused = () => {\n    let video = videoRef.current;\n    if (video.paused) {\n      video.play.call(video);\n      setPaused(false);\n    } else {\n      video.pause.call(video);\n      setPaused(true);\n    }\n  };\n\n  let toggleTitleShown = () => {\n    setTitleShown((shown) => !shown);\n  };\n\n  return (\n    <div className={\"postContainer\"}>\n      <div\n        className={\"titleContainer\"}\n        onClick={toggleTitleShown}\n        title={titleShown ? \"Click to hide title\" : \"Click to show title\"}\n      >\n        <span\n          className={\"title\"}\n          style={{\n            fontSize: post.title.length > 75 ? 25 : 35,\n            opacity: titleShown ? 1 : 0,\n          }}\n        >\n          {post.title}\n        </span>\n      </div>\n      {post.type === \"image\" ? (\n        <img src={post.media} className={\"postContent\"} alt={post.id} />\n      ) : (\n        <video ref={videoRef} src={post.media} className={\"postContent\"} />\n      )}\n      {post.type !== \"image\" ? (\n        <div\n          className={\"videoControlsContainer\"}\n          title={paused ? \"Click to play\" : \"Click to pause\"}\n          onClick={toggleVideoPaused}\n        >\n          {paused && (\n            <img src={\"/play.png\"} alt={\"play\"} className={\"playIcon\"} />\n          )}\n        </div>\n      ) : null}\n    </div>\n  );\n}\n\nexport default Post;\n","import React, { useEffect, useState } from \"react\";\nimport PerfectScrollbar from \"react-perfect-scrollbar\";\nimport Spinner from \"react-spinkit\";\nimport Post from \"./components/Post\";\n\nconst mediaTypes = [\"image\", \"hosted:video\", \"rich:video\"];\n\nfunction App() {\n  const [posts, setPosts] = useState([]);\n  const [initialLoad, setInitialLoad] = useState(true);\n  const [after, setAfter] = useState(\"\");\n  const [count, setCount] = useState(0);\n  const [refreshing, setRefreshing] = useState(false);\n\n  let getTopPosts = () => {\n    if (!refreshing) {\n      setRefreshing(true);\n      fetch(\n        `https://www.reddit.com/r/aww/top.json?limit=20&t=hour&after=${after}&count=${count}`\n      )\n        .then((res) => res.json())\n        .then((res) => {\n          setAfter(res.data.after);\n          setCount((c) => c + res.data.dist);\n          setPosts((p) => [\n            ...p,\n            ...res.data.children\n              .filter((post) => mediaTypes.includes(post.data.post_hint))\n              .map((post) => {\n                let media;\n                let type;\n                switch (post.data.post_hint) {\n                  case \"image\":\n                    media = post.data.url;\n                    type = \"image\";\n                    break;\n                  case \"rich:video\":\n                    if (post.data.media.oembed) {\n                      media = post.data.media.oembed.thumbnail_url;\n                      type = \"image\";\n                    }\n                    break;\n                  case \"hosted:video\":\n                    media = post.data.media.reddit_video.fallback_url;\n                    type = \"video\";\n                    break;\n                  default:\n                    return null;\n                }\n                return {\n                  title: post.data.title,\n                  url: `https://reddit.com${post.data.permalink}`,\n                  id: post.data.id,\n                  type,\n                  media,\n                };\n              })\n              .filter((post) => post !== null),\n          ]);\n        })\n        .catch((e) => console.log(e))\n        .finally(() => {\n          setRefreshing(false);\n          setInitialLoad(false);\n        });\n    }\n  };\n\n  useEffect(getTopPosts, []);\n\n  if (initialLoad) {\n    return (\n      <div className={\"loadingContainer\"}>\n        <Spinner name=\"wave\" fadeIn={\"none\"} />\n      </div>\n    );\n  }\n\n  return (\n    <div className={\"rootContainer\"}>\n      <div className={\"navbar\"}>\n        <div className={\"brandContainer\"}>\n          <img src={\"/favicon-32x32.png\"} alt={\"Animal Therapy\"} />\n          <span className={\"brand\"}>Animal Therapy</span>\n        </div>\n        <div className={\"navbarRightContainer\"}>\n          <a\n            target={\"_blank\"}\n            href={\"https://ngregrichardson.dev/projects\"}\n            rel=\"noopener noreferrer\"\n            className={\"navbarRightLink\"}\n          >\n            See my other projects\n          </a>\n        </div>\n      </div>\n      <PerfectScrollbar\n        onYReachEnd={getTopPosts}\n        className={\"scrollbarContainer\"}\n      >\n        {posts.map((post) => (\n          <Post post={post} key={post.id} />\n        ))}\n        <a\n          className=\"copyright\"\n          href={\"https://github.com/ngregrichardson/AnimalTherapy\"}\n          target={\"_blank\"}\n          rel=\"noopener noreferrer\"\n        >\n          &copy; Noah Richardson {new Date().getFullYear()} | Made with{\" \"}\n          <span role={\"img\"}>❤</span>️ for Dani\n        </a>\n      </PerfectScrollbar>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"react-perfect-scrollbar/dist/css/styles.css\";\nimport \"video-react/dist/video-react.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}