{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["mediaTypes","App","useState","posts","setPosts","initialLoad","setInitialLoad","after","setAfter","count","setCount","refreshing","setRefreshing","getTopPosts","fetch","then","res","json","data","dist","children","filter","post","includes","post_hint","map","media","type","url","oembed","thumbnail_url","reddit_video","fallback_url","title","permalink","id","catch","e","console","log","finally","useEffect","style","height","width","display","alignItems","justifyContent","name","noFadeIn","onYReachEnd","flexDirection","flexWrap","zIndex","padding","marginRight","position","key","left","right","textAlign","marginHorizontal","className","length","src","maxWidth","maxHeight","alt","top","bottom","cursor","onClick","videoId","video","document","querySelector","paused","play","call","classList","add","pause","remove","_toggleVideoPaused","getElementById","href","target","rel","role","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.3bd63876.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport PerfectScrollbar from \"react-perfect-scrollbar\";\nimport Spinner from \"react-spinkit\";\n\nconst mediaTypes = [\"image\", \"hosted:video\", \"rich:video\"];\n\nfunction App() {\n  const [posts, setPosts] = useState([]);\n  const [initialLoad, setInitialLoad] = useState(true);\n  const [after, setAfter] = useState(\"\");\n  const [count, setCount] = useState(0);\n  const [refreshing, setRefreshing] = useState(false);\n\n  let getTopPosts = () => {\n    if (!refreshing) {\n      setRefreshing(true);\n      fetch(\n        `https://www.reddit.com/r/aww/top.json?limit=20&t=hour&after=${after}&count=${count}`\n      )\n        .then((res) => res.json())\n        .then((res) => {\n          setAfter(res.data.after);\n          setCount(count + res.data.dist);\n          setPosts([\n            ...posts,\n            ...res.data.children\n              .filter((post) => mediaTypes.includes(post.data.post_hint))\n              .map((post) => {\n                let media;\n                let type;\n                switch (post.data.post_hint) {\n                  case \"image\":\n                    media = post.data.url;\n                    type = \"image\";\n                    break;\n                  case \"rich:video\":\n                    if (post.data.media.oembed) {\n                      media = post.data.media.oembed.thumbnail_url;\n                      type = \"image\";\n                    }\n                    break;\n                  case \"hosted:video\":\n                    media = post.data.media.reddit_video.fallback_url;\n                    type = \"video\";\n                    break;\n                  default:\n                    return null;\n                }\n                return {\n                  title: post.data.title,\n                  url: `https://reddit.com${post.data.permalink}`,\n                  id: post.data.id,\n                  type,\n                  media,\n                };\n              })\n              .filter((post) => post !== null),\n          ]);\n          setRefreshing(false);\n        })\n        .catch((e) => {\n          console.log(e);\n          setRefreshing(false);\n        })\n        .finally(() => setInitialLoad(false));\n    }\n  };\n\n  useEffect(() => {\n    getTopPosts();\n  }, []);\n\n  let _toggleVideoPaused = (videoId) => {\n    let video = document.querySelector(`#${videoId}`);\n    if (video.paused) {\n      video.play.call(video);\n      document.querySelector(`#${videoId}_play`).classList.add(\"paused\");\n    } else {\n      video.pause.call(video);\n      document.querySelector(`#${videoId}_play`).classList.remove(\"paused\");\n    }\n  };\n\n  if (initialLoad) {\n    return (\n      <div\n        style={{\n          height: \"100%\",\n          width: \"100%\",\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"center\",\n        }}\n      >\n        <Spinner name=\"wave\" noFadeIn />\n      </div>\n    );\n  }\n\n  return (\n    <>\n      <PerfectScrollbar\n        onYReachEnd={getTopPosts}\n        style={{\n          width: \"100%\",\n          display: \"flex\",\n          flexDirection: \"row\",\n          justifyContent: \"center\",\n          flexWrap: \"wrap\",\n          zIndex: 1000,\n        }}\n      >\n        {posts.map((post) => (\n          <div\n            style={{\n              display: \"flex\",\n              justifyContent: \"center\",\n              padding: 20,\n              marginRight: 11,\n              position: \"relative\",\n            }}\n            key={post.id}\n          >\n            <div\n              style={{\n                position: \"absolute\",\n                left: 20,\n                right: 20,\n                textAlign: \"center\",\n                marginHorizontal: 20,\n              }}\n              className=\"title\"\n            >\n              <span>{post.title.length > 75 ? \"\" : post.title}</span>\n            </div>\n            {post.type === \"image\" ? (\n              <img\n                src={post.media}\n                style={{ maxWidth: \"90vw\", maxHeight: \"90vh\", width: \"auto\" }}\n                alt={post.id}\n              />\n            ) : (\n              <video\n                src={post.media}\n                style={{ maxWidth: \"90vw\", maxHeight: \"90vh\", width: \"auto\" }}\n                id={post.id}\n              />\n            )}\n            {post.type !== \"image\" ? (\n              <div\n                style={{\n                  position: \"absolute\",\n                  left: 0,\n                  top: 0,\n                  right: 0,\n                  bottom: 0,\n                  display: \"flex\",\n                  alignItems: \"center\",\n                  justifyContent: \"center\",\n                  cursor: \"pointer\",\n                }}\n                title={\"Click to play/pause\"}\n                onClick={() => _toggleVideoPaused(post.id)}\n              >\n                {document.getElementById(post.id) ? (\n                  document.getElementById(post.id).paused ? (\n                    <img\n                      src={\"/play.png\"}\n                      alt={\"play\"}\n                      className=\"play\"\n                      style={{ height: 100, width: 100 }}\n                      id={`${post.id}_play`}\n                    />\n                  ) : null\n                ) : null}\n              </div>\n            ) : null}\n          </div>\n        ))}\n        <a\n          style={{\n            position: \"fixed\",\n            left: 0,\n            right: 0,\n            bottom: 5,\n            zIndex: 100,\n          }}\n          className=\"copyright\"\n          href={\"https://github.com/ngregrichardson/AnimalTherapy\"}\n          target={\"_blank\"}\n          rel=\"noopener noreferrer\"\n        >\n          Made with <span role={\"img\"}>❤</span>️ for Dani\n        </a>\n      </PerfectScrollbar>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"react-perfect-scrollbar/dist/css/styles.css\";\nimport \"video-react/dist/video-react.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}